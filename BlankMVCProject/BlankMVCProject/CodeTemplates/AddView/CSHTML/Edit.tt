<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="System.Web.Mvc" #>
<#@ assembly name="Twitter.Bootstrap.Utils" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Web.Mvc" #>
<#@ import namespace="Twitter.Bootstrap.Utils.Attributes" #>
<#
MvcTextTemplateHost mvcHost = (MvcTextTemplateHost)(Host);
#>
@using Twitter.Bootstrap.Utils.Extensions
@model <#= mvcHost.ViewDataTypeName #>
<#
// The following chained if-statement outputs the file header code and markup for a partial view, a content page, or a regular view.
if(mvcHost.IsPartialView) {
#>

<#
} else if(mvcHost.IsContentPage) {
#>

@{
    ViewBag.Title = "<#= mvcHost.ViewName + " " + mvcHost.ViewDataType.Name#>";
<#
if (!String.IsNullOrEmpty(mvcHost.MasterPageFile)) {
#>
    Layout = "<#= mvcHost.MasterPageFile#>";
<#
}
#>
}
<#
} else {
#>

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <title><#= mvcHost.ViewName + " " + mvcHost.ViewDataType.Name#></title>
</head>
<body>
<#
    PushIndent("    ");
}
#>
<#
if (mvcHost.ReferenceScriptLibraries) {
#>
<#
    if (!mvcHost.IsContentPage) {
#>
<script src="@Url.Content("~/Scripts/jquery-1.4.4.min.js")" type="text/javascript"></script>
<#
    }
#>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.bootstrap.js")" type="text/javascript"></script>
<#
}
#>
<script src="@Url.Content("~/Scripts/bootstrap-datepicker.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/bootstrap-datepicker-format.js")" type="text/javascript"></script>

	@using (Html.BootstrapBeginForm("form-horizontal")) {
		@Html.ValidationSummary(true)
		<fieldset>
			<legend><#= mvcHost.ViewName + " " + mvcHost.ViewDataType.Name#></legend>
<#
foreach (ModelProperty property in GetModelProperties(mvcHost.ViewDataType)) {
    if (property.IsPrimaryKey) {
#>
			<div class="control-group">
				<div class="controls">
					@Html.HiddenFor(model => model.<#= property.Name #>)
				</div>
			</div>
<#
    } else if (!property.IsReadOnly) {
#>
			<div class="control-group">
				@Html.BootstrapLabelFor(model => model.<#= property.Name #>)
				<div class="controls">
					@Html.EditorFor(model => model.<#= property.Name #>)
					@Html.BootstrapValidationMessageFor(model => model.<#= property.Name #>)
<#
if (!string.IsNullOrEmpty(property.HelperText)) {
#>
					@Html.BootstrapFormHelpTextBlockFor(model => model.<#= property.Name #>)
<#
}
#>
				</div>
			</div>

<#
    }
}
#>
		<div class="form-actions">
			<input type="submit" class="btn btn-primary" value="Submit" />
			@Html.ActionLink("Cancel", "Index", null, new {@class = "btn"})
		</div>
	</fieldset>
    
}
<#
// The following code closes the asp:Content tag used in the case of a master page and the body and html tags in the case of a regular view page
#>
<#
if(!mvcHost.IsPartialView && !mvcHost.IsContentPage) {
    ClearIndent();
#>
</body>
</html>
<#
}
#>

<#+
// Describes the information about a property on the model
class ModelProperty {
    public string Name { get; set; }
    public string ValueExpression { get; set; }
    public Type UnderlyingType { get; set; }
    public bool IsPrimaryKey { get; set; }
    public bool IsReadOnly { get; set; }
	public string HelperText { get; set; }
}

// Change this list to include any non-primitive types you think should be eligible for display/edit
static Type[] bindableNonPrimitiveTypes = new[] {
    typeof(string),
    typeof(decimal),
    typeof(Guid),
    typeof(DateTime),
    typeof(DateTimeOffset),
    typeof(TimeSpan),
	typeof(bool)
};

// Call this to get the list of properties in the model. Change this to modify or add your
// own default formatting for display values.
List<ModelProperty> GetModelProperties(Type type) {
    List<ModelProperty> results = GetEligibleProperties(type);
    
    foreach (ModelProperty prop in results) {
        if (prop.UnderlyingType == typeof(double) || prop.UnderlyingType == typeof(decimal)) {
            prop.ValueExpression = "String.Format(\"{0:F}\", " + prop.ValueExpression + ")";
        }
        else if (prop.UnderlyingType == typeof(DateTime)) {
            prop.ValueExpression = "String.Format(\"{0:g}\", " + prop.ValueExpression + ")";
        }
		else if (prop.UnderlyingType == typeof(bool)) {
			prop.HelperText = String.Empty; // Checkboxes are handled differently - see EditorTemplates\Boolean.cshtml
		}
    }

    return results;
}

// Call this to determine if the property represents a primary key. Change the
// code to change the definition of primary key.
bool IsPrimaryKey(PropertyInfo property) {
    if (string.Equals(property.Name, "id", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention
        return true;
    }

    if (string.Equals(property.Name, property.DeclaringType.Name + "id", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention
        return true;
    }

    foreach (object attribute in property.GetCustomAttributes(true)) {
        if (attribute is KeyAttribute) {  // WCF RIA Services and EF Code First explicit
            return true;
        }
        
        var edmScalar = attribute as EdmScalarPropertyAttribute;
        if (edmScalar != null && edmScalar.EntityKeyProperty) {  // EF traditional
            return true;
        }

        var column = attribute as ColumnAttribute;
        if (column != null && column.IsPrimaryKey) {  // LINQ to SQL
            return true;
        }
    }
    
    return false;
}

// This will return the primary key property name, if and only if there is exactly
// one primary key. Returns null if there is no PK, or the PK is composite.
string GetPrimaryKeyName(Type type) {
    IEnumerable<string> pkNames = GetPrimaryKeyNames(type);
    return pkNames.Count() == 1 ? pkNames.First() : null;
}

// This will return all the primary key names. Will return an empty list if there are none.
IEnumerable<string> GetPrimaryKeyNames(Type type) {
    return GetEligibleProperties(type).Where(mp => mp.IsPrimaryKey).Select(mp => mp.Name);
}

// Helper
List<ModelProperty> GetEligibleProperties(Type type) {
    List<ModelProperty> results = new List<ModelProperty>();

    foreach (PropertyInfo prop in type.GetProperties(BindingFlags.Public | BindingFlags.Instance)) {
        Type underlyingType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;
        if (prop.GetGetMethod() != null && prop.GetIndexParameters().Length == 0 && IsBindableType(underlyingType)) {
            results.Add(new ModelProperty {
                Name = prop.Name,
                ValueExpression = "Model." + prop.Name,
                UnderlyingType = underlyingType,
                IsPrimaryKey = IsPrimaryKey(prop),
                IsReadOnly = prop.GetSetMethod() == null,
				HelperText = GetHelperText(prop)
            });
        }
    }

    return results;
}

// Helper
bool IsBindableType(Type type) {
    return type.IsPrimitive || bindableNonPrimitiveTypes.Contains(type);
}

// Helper
string GetHelperText(PropertyInfo property) {
	string helperText = String.Empty;

	foreach (object attribute in property.GetCustomAttributes(true)) {
        if (attribute is HelperTextAttribute) {  // Bootstrap helper text
			HelperTextAttribute helper = attribute as HelperTextAttribute;
		    if (helper != null) {
				helperText = helper.HelperText;
			}
        }
                
    }

	return helperText;
}
#>